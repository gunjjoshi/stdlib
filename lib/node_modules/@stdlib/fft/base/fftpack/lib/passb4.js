/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code and copyright notice are from the [PFFFT library]{@link https://github.com/marton78/pffft/blob/master/fftpack.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (c) 2004 the University Corporation for Atmospheric
* Research ("UCAR"). All rights reserved. Developed by NCAR's
* Computational and Information Systems Laboratory, UCAR,
* www.cisl.ucar.edu.
*
* Redistribution and use of the Software in source and binary forms,
* with or without modification, is permitted provided that the
* following conditions are met:
*
*     - Neither the names of NCAR's Computational and Information Systems
*       Laboratory, the University Corporation for Atmospheric Research,
*       nor the names of its sponsors or contributors may be used to
*       endorse or promote products derived from this Software without
*       specific prior written permission.
*
*     - Redistributions of source code must retain the above copyright
*       notices, this list of conditions, and the disclaimer below.
*
*     - Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions, and the disclaimer below in the
*       documentation and/or other materials provided with the
*       distribution.
*
* THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES OR OTHER LIABILITY, WHETHER IN AN
* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
* SOFTWARE.
* ```
*/

'use strict';

// MODULES //

var chRef = require( './ch_ref.js' );
var ccRef = require( './cc_ref.js' );


// MAIN //

/**
* Performs a pass of length 4 of the FFT algorithm.
*
* @private
* @param {integer} ido - Number of real values for each transform
* @param {integer} l1 - Length of the input sequences
* @param {Float64Array} cc - Input array containing sequences to be transformed
* @param {Float64Array} ch - Output array containing transformed sequences
* @param {Float64Array} wa1 - First array of twiddle factors
* @param {Float64Array} wa2 - Second array of twiddle factors
* @param {Float64Array} wa3 - Third array of twiddle factors
* @returns {void}
*/
function passb4( ido, l1, cc, ch, wa1, wa2, wa3 ) {
	var ch_offset;
	var cc_offset;
	var ci2;
	var ci3;
	var ci4;
	var cr2;
	var cr3;
	var cr4;
	var ti1;
	var ti2;
	var ti3;
	var ti4;
	var tr1;
	var tr2;
	var tr3;
	var tr4;
	var i;
	var k;

	// Parameter adjustments...
	ch_offset = 1 + ( ido * ( 1 + l1 ) );
	cc_offset = 1 + ( ido * 5 );

	// Function body:
	if ( ido === 2 ) {
		for ( k = 1; k <= l1; ++k ) {
			ti1 = cc[ ccRef( 2, 1, k, 4, ido ) - cc_offset ] - cc[ ccRef( 2, 3, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
			ti2 = cc[ ccRef( 2, 1, k, 4, ido ) - cc_offset ] + cc[ ccRef( 2, 3, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
			tr4 = cc[ ccRef( 2, 4, k, 4, ido ) - cc_offset ] - cc[ ccRef( 2, 2, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
			ti3 = cc[ ccRef( 2, 2, k, 4, ido ) - cc_offset ] + cc[ ccRef( 2, 4, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
			tr1 = cc[ ccRef( 1, 1, k, 4, ido ) - cc_offset ] - cc[ ccRef( 1, 3, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
			tr2 = cc[ ccRef( 1, 1, k, 4, ido ) - cc_offset ] + cc[ ccRef( 1, 3, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
			ti4 = cc[ ccRef( 1, 2, k, 4, ido ) - cc_offset ] - cc[ ccRef( 1, 4, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
			tr3 = cc[ ccRef( 1, 2, k, 4, ido ) - cc_offset ] + cc[ ccRef( 1, 4, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
			ch[ chRef( 1, k, 1, l1, ido ) - ch_offset ] = tr2 + tr3;
			ch[ chRef( 1, k, 3, l1, ido ) - ch_offset ] = tr2 - tr3;
			ch[ chRef( 2, k, 1, l1, ido ) - ch_offset ] = ti2 + ti3;
			ch[ chRef( 2, k, 3, l1, ido ) - ch_offset ] = ti2 - ti3;
			ch[ chRef( 1, k, 2, l1, ido ) - ch_offset ] = tr1 + tr4;
			ch[ chRef( 1, k, 4, l1, ido ) - ch_offset ] = tr1 - tr4;
			ch[ chRef( 2, k, 2, l1, ido ) - ch_offset ] = ti1 + ti4;
			ch[ chRef( 2, k, 4, l1, ido ) - ch_offset ] = ti1 - ti4;
		}
	} else {
		for ( k = 1; k <= l1; ++k ) {
			for ( i = 2; i <= ido; i += 2 ) {
				ti1 = cc[ ccRef( i, 1, k, 4, ido ) - cc_offset ] - cc[ ccRef( i, 3, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
				ti2 = cc[ ccRef( i, 1, k, 4, ido ) - cc_offset ] + cc[ ccRef( i, 3, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
				ti3 = cc[ ccRef( i, 2, k, 4, ido ) - cc_offset ] + cc[ ccRef( i, 4, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
				tr4 = cc[ ccRef( i, 4, k, 4, ido ) - cc_offset ] - cc[ ccRef( i, 2, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
				tr1 = cc[ ccRef( i - 1, 1, k, 4, ido ) - cc_offset ] - cc[ ccRef( i - 1, 3, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
				tr2 = cc[ ccRef( i - 1, 1, k, 4, ido ) - cc_offset ] + cc[ ccRef( i - 1, 3, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
				ti4 = cc[ ccRef( i - 1, 2, k, 4, ido ) - cc_offset ] - cc[ ccRef( i - 1, 4, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
				tr3 = cc[ ccRef( i - 1, 2, k, 4, ido ) - cc_offset ] + cc[ ccRef( i - 1, 4, k, 4, ido ) - cc_offset ]; // eslint-disable-line max-len
				ch[ chRef( i - 1, k, 1, l1, ido ) - ch_offset ] = tr2 + tr3;
				cr3 = tr2 - tr3;
				ch[ chRef( i, k, 1, l1, ido ) - ch_offset ] = ti2 + ti3;
				ci3 = ti2 - ti3;
				cr2 = tr1 + tr4;
				cr4 = tr1 - tr4;
				ci2 = ti1 + ti4;
				ci4 = ti1 - ti4;
				ch[ chRef( i - 1, k, 2, l1, ido ) - ch_offset ] = ( wa1[ i - 1 - 1 ] * cr2 ) - ( wa1[ i - 1 ] * ci2 );
				ch[ chRef( i, k, 2, l1, ido ) - ch_offset ] = ( wa1[ i - 1 - 1 ] * ci2 ) + ( wa1[ i - 1 ] * cr2 );
				ch[ chRef( i - 1, k, 3, l1, ido ) - ch_offset ] = ( wa2[ i - 1 - 1 ] * cr3 ) - ( wa2[ i - 1 ] * ci3 );
				ch[ chRef( i, k, 3, l1, ido ) - ch_offset ] = ( wa2[ i - 1 - 1 ] * ci3 ) + ( wa2[ i - 1 ] * cr3 );
				ch[ chRef( i - 1, k, 4, l1, ido ) - ch_offset ] = ( wa3[ i - 1 - 1 ] * cr4 ) - ( wa3[ i - 1 ] * ci4 );
				ch[ chRef( i, k, 4, l1, ido ) - ch_offset ] = ( wa3[ i - 1 - 1 ] * ci4 ) + ( wa3[ i - 1 ] * cr4 );
			}
		}
	}
}


// EXPORTS //

module.exports = passb4;
