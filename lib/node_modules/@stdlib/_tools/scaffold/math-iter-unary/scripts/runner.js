#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var shell = require( 'child_process' ).execSync; // eslint-disable-line node/no-sync
var existsSync = require( '@stdlib/fs/exists' ).sync;
var objectKeys = require( '@stdlib/utils/keys' );
var rootDir = require( '@stdlib/_tools/utils/root-dir' );
var log = require( '@stdlib/console/log' );
var capitalize = require( '@stdlib/string/capitalize' );
var DATA = require( './data.json' );


// VARIABLES //

var CREATE_ONLY = 1;
var SCAFFOLD_SCRIPT = resolve( __dirname, 'scaffold.sh' );
var ROOT_DIR = resolve( rootDir(), 'lib', 'node_modules' );


// FUNCTIONS //

/**
* Returns an `ALIAS` environment variable string.
*
* @private
* @param {string} alias - package alias
* @returns {string} environment variable string
*
* @example
* var s = aliasEnvVar( 'abs' );
* // returns 'ALIAS=iterAbs'
*
* @example
* var s = aliasEnvVar( 'absf' );
* // returns 'ALIAS=iterAbsf'
*/
function aliasEnvVar( alias ) {
	return 'ALIAS=iter' + capitalize( alias );
}

/**
* Returns a `DESC` environment variable string.
*
* @private
* @param {string} desc - default description
* @returns {string} environment variable string
*
* @example
* var s = descEnvVar( 'computes the cube root' );
* // returns 'DESC=\'computes the cube root\''
*/
function descEnvVar( desc ) {
	return 'DESC=\'' + desc + '\'';
}

/**
* Returns a `DESC_LINK_TEXT` environment variable string.
*
* @private
* @param {string} desc - short description
* @returns {string} environment variable string
*
* @example
* var s = linkTextEnvVar( 'cube root' );
* // returns 'DESC_LINK_TEXT=\'cube root\''
*
* @example
* var s = linkTextEnvVar( '' );
* // returns ''
*/
function linkTextEnvVar( desc ) {
	if ( desc === '' ) {
		return '';
	}
	return 'DESC_LINK_TEXT=\'' + desc + '\'';
}

/**
* Returns a `KEYWORDS` environment variable string.
*
* @private
* @param {StringArray} keywords - list of keywords
* @returns {string} environment variable string
*
* @example
* var keywords = [ 'math', 'special' ];
*
* var s = keywordsEnvVar( keywords );
* // returns 'KEYWORDS=\'math,special\''
*/
function keywordsEnvVar( keywords ) {
	return 'KEYWORDS=\'' + keywords.join( ',' ) + '\'';
}

/**
* Returns a `VALUES_LEN_2` environment variable string.
*
* @private
* @param {NumberArray} values - example values
* @returns {string} environment variable string
*
* @example
* var values = [ 1, 2, 3, 4 ];
*
* var s = valuesEnvVar( values );
* // returns 'VALUES_LEN_2=\'1,2\''
*/
function valuesEnvVar( values ) {
	return 'VALUES_LEN_2=\'' + values.slice( 0, 2 ).join( ',' ) + '\'';
}

/**
* Returns a string containing environment variable for generating pseudorandom numbers.
*
* @private
* @param {Object} obj - configuration object
* @returns {string} environment variable string
*
* @example
* var o = {
*     'prng': 'random/base/uniform',
*     'parameters': [ -10, 10 ]
* };
*
* var s = prngEnvVars( o );
* // returns 'BASE_PRNG=\'uniform\',RAND_MIN=-10,RAND_MAX=10'
*/
function prngEnvVars( obj ) {
	var p = obj.prng.split( '/' );
	return 'BASE_PRNG=\'' + p[ p.length-1 ] + '\',RAND_MIN=' + obj.parameters[ 0 ] +',RAND_MAX=' + obj.parameters[ 1 ];
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var keys;
	var envs;
	var cmd;
	var p;
	var k;
	var v;
	var o;
	var i;
	var j;

	for ( i = 0; i < DATA.length; i++ ) {
		o = DATA[ i ];
		p = resolve( ROOT_DIR, '@stdlib/math/iter/special', o.alias, 'package.json' );
		if ( existsSync( p ) ) {
			if ( CREATE_ONLY ) {
				log( 'Package already exists. Skipping @%s...', 'stdlib/math/iter/special/' + o.alias );
				continue;
			}
			log( 'Updating package: @%s...', 'stdlib/math/iter/special/' + o.alias );
		} else {
			log( 'Creating package: @%s...', 'stdlib/math/iter/special/' + o.alias );
		}
		keys = objectKeys( o );
		envs = [];
		for ( j = 0; j < keys.length; j++ ) {
			k = keys[ j ];
			v = o[ k ];
			if ( k === 'alias' ) {
				envs.push( aliasEnvVar( v ) );
				continue;
			}
			if ( k === 'desc' ) {
				envs.push( descEnvVar( v ) );
				continue;
			}
			if ( k === 'short_desc' ) {
				envs.push( linkTextEnvVar( v ) );
				continue;
			}
			if ( k === 'keywords' ) {
				envs.push( keywordsEnvVar( v ) );
				continue;
			}
			if ( k === 'parameters' ) {
				envs.push( valuesEnvVar( v[ 0 ].parameters.example_values ) );
				envs.push( prngEnvVars( v[ 0 ].parameters.rand ) );
				continue;
			}
		}
		cmd = envs.join( ' ' ) + ' . ' + SCAFFOLD_SCRIPT;
		shell( cmd );
	}
}

main();
